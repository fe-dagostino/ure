# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: emscripten

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install emsdk
      run: |
           git clone https://github.com/emscripten-core/emsdk.git
           cd emsdk
           git pull
           ./emsdk install latest
           ./emsdk activate latest
           source "/home/runner/work/ure/ure/emsdk/emsdk_env.sh"
           emcc -v
           
    - name: Install dependencies
      run: |
           sudo apt-get update
           sudo apt install -y ninja-build cmake
           sudo apt install -y gcc-14 g++-14
           sudo apt install -y cppcheck
           sudo apt install -y libgl1-mesa-dev
           sudo apt install -y libfreetype-dev
           sudo apt install -y libcurlpp-dev
           sudo apt install -y libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libxxf86vm-dev
           sudo apt install -y libxkbcommon-dev
           sudo apt install -y libwayland-dev libwayland-bin
           sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 100 --slave /usr/bin/g++ g++ /usr/bin/g++-14 --slave /usr/bin/gcov gcov /usr/bin/gcov-14
           sudo update-alternatives --set gcc /usr/bin/gcc-14
           ninja --version
           cmake --version
           gcc --version
    
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
            cmake -B ${{github.workspace}}/build 
            -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} 
            -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=TRUE 
            -DCMAKE_C_COMPILER:FILEPATH=/home/runner/work/ure/ure/emsdk/upstream/emscripten/emcc 
            -DCMAKE_CXX_COMPILER:FILEPATH=/home/runner/work/ure/ure/emsdk/upstream/emscripten/em++ 
            --no-warn-unused-cli -S/home/runner/work/ure/ure/ -G Ninja
      
    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

